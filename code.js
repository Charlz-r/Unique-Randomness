let numLayers = 1000; // Increase layers for tighter spiral

function setup() {
  createCanvas(800, 800);
  angleMode(RADIANS);
  noFill();
  strokeWeight(2);
  stroke(0, 50, 100, 150); // Add transparency for layering effect
  translate(width / 2, height / 2);
  s = new MyStructure();
  
  let lastRadius = 0;
  let oldx = 0;
  let oldy = 0;

  for (let i = 0; i < numLayers; i++) {
    let angle = map(i, 0, numLayers, 0, TWO_PI * 10); // Tighter rotation (10 full rotations)
    let radius = s.nxt();

    let x = radius * cos(angle);
    let y = radius * sin(angle);
    
    // Add varying stroke colors and some transparency for the lines
    stroke(lerpColor(color(255, 0, 0, 100), color(0, 0, 255, 100), map(i, 0, numLayers, 0, 1)));
    
    ellipse(x, y, 4, 4); // Larger dots for more emphasis
    line(x, y, oldx, oldy); // Smooth transitions between points
        
    oldx = x;
    oldy = y;
  }
}


class MyStructure {
  constructor(arr) {
    // Original values
    this.arr = [83, 32, 100, 109, 32, 89, 44, 105, 101, 115, 115, 112, 111, 32, 65, 111, 32, 32, 97, 105, 103, 97, 65, 117, 101, 32, 115, 32, 112, 114, 66, 104, 32, 103, 115, 101, 33, 104, 79, 111, 97, 111, 32, 79, 98, 79, 111, 121, 114, 101, 111, 82, 101, 111, 117, 111, 102, 97, 104, 121, 39, 63, 58, 101, 101, 116, 99, 111, 116, 33, 109, 101, 117, 108, 79, 100, 111, 32, 116, 119, 46, 35, 79, 110, 119, 111, 104, 32, 32, 103, 116, 117, 107, 32, 111, 110, 121, 100, 32, 105, 116, 32, 73, 32, 58, 116, 110, 32, 115, 108, 108, 108, 97, 114, 121, 98, 77, 101, 97, 117, 83, 101, 114, 32, 110, 114, 65, 103, 32, 32, 104, 110, 116, 110, 76, 68, 32, 102, 32, 100, 83, 110, 116, 75, 89, 87, 101, 101, 102, 115, 115, 32, 32, 115, 32, 99, 121, 108, 116, 32, 49, 100, 32, 97, 32, 101, 101, 101, 79, 116, 32, 32, 115, 32, 105, 40, 105, 110, 116, 108, 108, 101, 114, 116, 115, 116, 97, 109, 32, 101, 108, 115, 101, 32, 109, 121, 102, 69, 32, 102, 121, 110, 105, 115, 116, 109, 101, 46, 101, 104, 105, 109, 41, 105, 105, 58, 104, 116, 102, 117, 58, 116, 97, 32, 69, 41, 32, 58, 32, 32, 108, 100, 100, 65, 117, 73, 115, 115, 99, 104, 107, 100, 111, 108, 32, 115, 116, 108, 116, 101, 58, 105, 39, 32, 32, 103, 97, 103, 65, 32, 110, 116, 112, 109, 100, 32, 115, 111, 111, 97, 101, 116, 111, 86, 121, 32, 68, 119, 99, 32, 86, 105, 32, 110, 119, 97, 104, 101, 66, 118, 110, 97, 32, 89, 111, 89, 114, 65, 111, 101, 65, 101, 32, 65, 68, 32, 45, 82, 114, 114, 46, 110, 97, 111, 32, 101, 110, 101, 101, 41, 73, 97, 103, 111, 69, 97, 116, 107, 115, 40, 109, 97, 115, 116, 115, 107, 44, 72, 45, 114, 66, 109, 115, 32, 65, 69, 85, 99, 82, 115, 65, 105, 32, 65, 32, 119, 103, 115, 32, 111, 104, 97, 115, 105, 32, 58, 32, 82, 110, 117, 87, 114, 105, 110, 110, 114, 103, 108, 109, 32, 101, 99, 32, 111, 115, 99, 114, 98, 41, 101, 102, 117, 32, 32, 116, 101, 76, 84, 111, 89, 32, 40, 32, 104, 105, 79, 101, 72, 115, 108, 103, 97, 103, 85, 116, 114, 82, 119, 117, 46, 108, 32, 69, 115, 105, 101, 101, 32, 45, 66, 114, 68, 112, 69, 75, 101, 116, 110, 101, 32, 116, 32, 105, 101, 89, 63, 104, 109, 58, 105, 111, 115, 118, 84, 66, 101, 73, 104, 32, 32, 119, 101, 117, 45, 89, 114, 110, 116, 85, 117, 110, 44, 32, 104, 32, 32, 101, 104, 117, 117, 107, 116, 104, 108, 97, 32, 110, 105, 32, 84, 117, 98, 32, 121, 110, 110, 111, 82, 111, 116, 105, 116, 108, 78, 111, 108, 39, 97, 116, 116, 110, 100, 98, 67, 104, 116, 111, 101, 114, 32, 97, 115, 102, 111, 97, 66, 101, 100, 109, 58, 114, 77, 109, 83, 114, 97, 109, 58, 116, 116, 110, 32, 117, 41, 32, 32, 46, 66, 104, 97, 32, 102, 110, 48, 102, 32, 97, 115, 105, 89, 84, 115, 101, 119, 46, 32, 65, 40, 110, 72, 101, 46, 44, 58, 109, 32, 101, 115, 114, 108, 116, 101, 116, 101, 121, 32, 101, 117, 32, 118, 115, 101, 39, 32, 97, 32, 121, 98, 101, 32, 102, 110, 32, 100, 101, 32, 103, 111, 111, 100, 44, 109, 115, 61, 100, 33, 32, 58, 103, 110, 71, 104, 32, 110, 116, 75, 82, 32, 111, 104, 115, 106, 45, 32, 110, 116, 65, 40, 97, 104, 121, 116, 110, 97, 111, 97, 108, 100, 115, 79, 108, 46, 32, 114, 101, 115, 32, 114, 32, 104, 70, 101, 104, 116, 32, 32, 110, 111, 101, 116, 115, 110, 114, 114, 115, 111, 117, 114, 85, 32, 97, 110, 46, 101, 107, 109, 32, 66, 44, 110, 105, 110, 112, 83, 101, 97, 32, 102, 121, 46, 115, 105, 32, 86, 32, 105, 114, 114, 97, 32, 101, 116, 32, 32, 104, 108, 101, 32, 102, 97, 117, 110, 105, 66, 32, 32, 66, 112, 101, 32, 116, 104, 104, 32, 101, 105, 111, 121, 32, 104, 32, 104, 32, 32, 77, 101, 109, 103, 101, 111, 111, 112, 102, 44, 32, 65, 114, 65, 32, 111, 111, 99, 101, 119, 116, 97, 104, 32, 101, 32, 46, 110, 86, 114, 65, 108, 101, 111, 108, 115, 111, 32, 116, 110, 32, 70, 32, 115, 69, 32, 97, 78, 108, 71, 115, 97, 61, 105, 114, 85, 68, 45, 32, 104, 108, 106, 79, 119, 101, 32, 66, 104, 114, 79, 44, 46, 32, 99, 107, 76, 111, 115, 46, 41, 116, 101, 32, 111, 32, 98, 32, 68, 32, 84, 115, 99, 115, 58, 89, 32, 65, 105, 32, 109, 116, 74, 110, 97, 101, 116, 103, 110, 101, 32, 58, 44, 97, 101, 115, 101, 115, 78, 116, 116, 115, 32, 116, 105, 65, 121, 66, 102, 32, 115, 32, 101, 97, 110, 119, 82, 101, 110, 102, 114, 32, 45, 116, 82, 110, 114, 116, 114, 32, 101, 111, 119, 118, 111, 97, 97, 32, 110, 58, 108, 32, 108, 101, 83, 101, 115, 114, 102, 32, 77, 32, 103, 111, 97, 107, 32, 108, 117, 114, 115, 115, 119, 32, 110, 101, 101, 32, 99, 105, 114, 114];
    this.index = 0;  // Start from the first element
    this.arr = this.arr.map(value => map(value, 20, 130, -20, 20)); // Map to desired range
  }
  
  nxt() {
    return this.arr[(++this.index) % this.arr.length] + this.index / 2;
  }
}
